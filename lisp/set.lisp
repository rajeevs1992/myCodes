(defun mem(l key)
	(if (null (= (length l) 0))
		(if (= (car l) key)
			t
			(mem (cdr l) key)
		)
		nil
	)
)
(defun readList ()
	(let ((x 0) (num 0) (l ()))
		(print "Enter the number of entries")
		(setf num (read))
		(print "Enter the entries")
		(dotimes (x num)
			(setf l (cons (read) l)))
	l
	)
)
(defun u(l1 l2)
	(if (null (= (length l2) 0))
		(progn 
			(if (null (mem l1 (car l2)))
				(setf l1 (cons (car l2) l1)))
			(u l1 (cdr l2)))
		l1)
)
(defun int(l1 l2 res)
	(if (null (= (length l2) 0))
		(progn
			(if (mem l1 (car l2))
				(setf res (cons (car l2) res)))
			(int l1 (cdr l2) res))
		res
	)
)
(print "Enter list 1")
(setf l1 (readList))
(print "Enter list 2")
(setf l2 (readList))
(print "Intersection ")
(print (int l1 l2 '()))
(print "Union")
(print (u l1 l2))
